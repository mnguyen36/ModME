#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ModME:server');
var http = require('http');
var fs = require ('fs');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);



/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */


var parseString = require('xml2js').parseString;
var ftp = require('ftp-get');
var url = "ftp://fanslive:livestats@ftp.netitor.com/geot/m-basebl/geot.xml";


io.sockets.on('connection', function(socket) {

  // watching the xml file
  fs.watchFile('stats.xml', function(curr, prev) {
    // on file change we can read the new xml
    fs.readFile('stats.xml', function(err, data) {
      if (err) throw err;
      // parsing the new xml data and converting them into json file
      parseString(data, function (err, result) {
       socket.volatile.emit('notification', result);
      });
      // send the new data to the client
    });
  });

});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
function doMainStuff() {
    ftp.get( url, 'stats.xml', function(err, res){
      console.log(res);
    });
    setTimeout(doMainStuff, 10 * 1000);
}
doMainStuff();